"""
Django settings for saratings project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os,json

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
    
    
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!

print("os.uname()[1]",os.uname()[1])

if 'F16' in os.uname()[1]:
    print("Running in Dev Environment")
    with open("/etc/saratings_dev_config.json") as config_file:
        config = json.load(config_file)
        
    ALLOWED_HOSTS = ["*"]
    DEBUG = True

        
if 'aws' in os.uname()[2]:
    print("Running in Prod Environment")
    with open("/etc/saratings_config.json") as config_file:
        config = json.load(config_file)
        
  
    ALLOWED_HOSTS = ["ec2-13-244-129-140.af-south-1.compute.amazonaws.com","13.244.129.140","www.saratings.com","saratings.com"]
    DEBUG = False

        
SECRET_KEY = config.get('SECRET_KEY') 

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.humanize',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'saratingsapp',
    'django_celery_results',
    'celery',
    'captcha',
    'django_otp',
    'django_otp.plugins.otp_totp',
    'django_otp.plugins.otp_static',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if 'aws' in os.uname()[2]:
    MIDDLEWARE.append('django_otp.middleware.OTPMiddleware')
    
ROOT_URLCONF = 'saratings.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,#Template loader will search for templates inside saratingsapp/templates
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'saratings.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

if 'F16' in os.uname()[1]:
    print("Running DB Dev")  
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': config.get('DB_NAME'),
            'USER': config.get('DB_USER'),
            'PASSWORD': config.get('DB_PASSWORD'),
        }
    }

if 'aws' in os.uname()[2]:
    print("Running DB in Prod") 
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': config.get('DB_NAME'),
            'USER': config.get('DB_USER'),
            'PASSWORD': config.get('DB_PASSWORD'),
            'HOST': config.get('DB_HOST'),
            'PORT': '3306',
            'OPTIONS': {
                'sql_mode': 'traditional',
                },
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Johannesburg'

USE_I18N = True

USE_TZ = False

"""
Useful for loading static files in templates
{% load static %} and href="{% static 'path/to/file' %}"
"""

#Only in dev
if 'F16' in os.uname()[1]:
    
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static')
        ]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR,'/static')


if 'F16' in os.uname()[1]:
    IS_DEV = True
    IS_PROD = False
    
    print("Running settings in DEV") 
    #For server path to store files locally
    STATIC_URL = '/static/'
    MEDIA_ROOT = os.path.join (BASE_DIR, 'media')

#For server path to store files locally
if 'aws' in os.uname()[2]:
    print("Running settings in PROD")
    IS_DEV = False
    IS_PROD = True
    STATIC_URL = '/static/'
    MEDIA_ROOT = os.path.join (BASE_DIR, 'media')
    # MEDIA_ROOT = os.path.join(BASE_DIR, 'static/bootstrap/assets/file/')

#For browser to access the files over http.
MEDIA_URL = '/media/'

#https://testdriven.io/blog/django-static-files/  
#For browser to access the files over http.
# MEDIA_ROOT = os.path.join (BASE_DIR, 'media')
# MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = config['EMAIL_HOST']
EMAIL_HOST_USER = config['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = config['EMAIL_HOST_PASSWORD']
EMAIL_PORT = 587
DEFAULT_FROM_EMAIL = config['EMAIL_HOST_USER']

#Running on a specified port
CELERY_BROKER_URL = 'redis://localhost:6382'

#With default, use it if connection times out on other ports 
# CELERY_RESULT_BACKEND = 'redis://localhost:6379'

#Allows results to be saved in the db
CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Africa/Johannesburg'

"""
https://realpython.com/caching-in-django-with-redis/
Checking the cached views
run: redis-cli -h 127.0.0.1 -p 6383
127.0.0.1:6383> keys *
"""
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6383',
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        },
        "KEY_PREFIX": "sar_cache"
    },
    
}

LOGIN_URL = 'login/'

with open('/etc/recaptcha_config.json') as rc_config_file:
    recap_config = json.load(rc_config_file)
    
#SITE_KEY
RECAPTCHA_PUBLIC_KEY = recap_config['RECAPTCHA_PUBLIC_KEY'] 

#SECRET_KEY
RECAPTCHA_PRIVATE_KEY= recap_config['RECAPTCHA_PRIVATE_KEY']